#The list of packages to be loaded

list.of.packages <- c("RJSONIO","plyr")

new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages,function(x){library(x,character.only=TRUE)})

#Helper functions

# Convert a string to a numeric

getNum <- function(x) {
  as.numeric(as.character(x))
}

# Test whether a driver code exists and if so, return it

driverCodeExists <- function(x) {
  if (is.null(x$code))
  return('')
  else
  return(x$code)
}

# Generate time in seconds from min:seconds format

timeInS <- function(tStr) {
  if (is.na(tStr)) tS = NA
  else {
    x = unlist(strsplit(tStr,':'))
    if (length(x) == 1) tS = getNum(x[1])
    else if (length(x) == 2) tS = 60*getNum(x[1]) + getNum(x[2])
    else if (length(x) == 3) tS = 3600*getNum(x[1]) + 60*getNum(x[2]) + getNum(x[3])
    else tS = NA
  }
  tS
}

API_PATH <- "http://ergast.com/api/f1/"

# URL Builder Functions

# Get URL for Races by Year

getRacesByYear_URL <- function(year,format = 'json'){
  paste(API_PATH,year,'.',format,sep = '')
}

# Get URL for Pits by Race-and-Year

getPitsbyYearRace_URL <- function(year,raceNum,format = 'json'){
  paste(API_PATH,year,'/',raceNum,'/pitstops.',format,'?limit=1000',sep = '')
}

# Get URL for Laps by Race-and-Year

getLapsbyYearRace_URL <- function(year,raceNum,format = 'json',offset = 0){
  paste(API_PATH,year,'/',raceNum,'/laps.',format,'?limit=1000','&offset=',offset,sep = '')
}

# Get URL for Laps by Race-and-Year-and-Driver

getLapsbyYearRaceDriver_URL <- function(year,raceNum,driverId,format = 'json'){
  paste(API_PATH,year,'/',raceNum,'/drivers/',driverId,'/laps.',format,'?limit=1000',sep = '')
}

# Get URL for Qualifying

getQual_URL <- function(year = NA,raceNum = NA,driverRef = NA,constructorRef = NA,format = 'json'){
  url = paste(API_PATH,sep = '')
  if(!is.na(year)){
    url = paste(url,year,'/',sep = '')
    if(!is.na(raceNum))
    url = paste(url,raceNum,'/',sep = '')
  }
  if(!is.na(driverRef))
  url = paste(url,'drivers/',driverRef,'/',sep = '')
  if(!is.na(constructorRef))
  url = paste(url,'constructors/',constructorRef,'/',sep = '')
  url = paste(url,'qualifying.',format,'?limit=2500',sep = '')
  url
}

# Get URL for Results by Race-and-Year

getResultsbyYearRace_URL <- function(year,raceNum,format = 'json'){
  paste(API_PATH,year,'/',raceNum,'/results.',format,'?limit=2500',sep = '')
}

# Get URL for Drivers by Year

getDriversbyYear_URL <- function(year,format = 'json'){
  paste(API_PATH,year,'/drivers.',format,'?limit=2500',sep = '')
}

# Get URL for Results by Year and Driver

getResultsbyYearDriver_URL <- function(year,driverRef = NA,format = 'json'){
  url = paste(API_PATH,year,'/',sep = '')
  if(!is.na(driverRef))
  url = paste(url,"drivers/",driverRef,'/',sep = '')
  url = paste(url,"results.",format,"?limit=2500",sep = '')
  url
}

# Get JSON data

getJSONbyURL <- function(url){
  Sys.sleep(0.25)
  fromJSON(url,simplify = FALSE)
}

# Format and Generate dataframes

# Format Lap data

formatlapdata <- function(rd){
  lap_data <- data.frame(lap = numeric(),
                         driverID = character(),
                         position = numeric(),
                         strtime = character(),
                         rawtime = numeric(),
                         stringsAsFactors = FALSE)

                         for (i in 1:length(rd)){
                            lapNum = getNum(rd[[i]]$number)
                            for (j in 1:length(rd[[i]]$Timings)){
                              lap_data = rbind(lap_data,data.frame(
                                lap = lapNum,
                                driverId = rd[[i]]$Timings[[j]]$driverId,
                                position = as.integer(as.character(rd[[i]]$Timings[[j]]$position)),
                                strtime = rd[[i]]$Timings[[j]]$time,
                                rawtime = timeInS(rd[[i]]$Timings[[j]]$time)))
                            }
                          }

                          lap_data = ddply(lap_data,.(driverId),transform,cuml = cumsum(rawtime))

                          lap_data$diff <- ave(lap_data$rawtime, lap_data$driverId, FUN = function(x) c(NA, diff(x)))

lap_data
}

# Extract Laps data from race data JSON object

getLapsData_path <- function(rd_laps){
  laps_data = rd_laps$MRData$RaceTable$Races[[1]]$Laps
  laps_data
}

# Generate dataframe containing lap data for a given race

lap_data_race <- function(year,raceNum,format = 'json'){
  rd_laps = getJSONbyURL(getLapsbyYearRace_URL(year,raceNum))
  ld = getLapsData_path(rd_laps)
  tmp = formatlapdata(ld)
  if(as.integer(rd_laps$MRData$total) > 1000){
    rd_laps = getJSONbyURL(getLapsbyYearRace_URL(year,raceNum,offset=1000))
    ld = c(ld,getLapsData_path(rd_laps))
  }
  formatlapdata(ld)
}

# Generate dataframe containing lap data for a specified driver

lap_data_driver <- function(year,raceNum,driver,format = 'json'){
  rd_laps = getJSONbyURL(getLapsbyYearRaceDriver_URL(year,raceNum,driver))
  ld = getLapsData_path(rd_laps)
  formatlapdata(ld)
}

# Extract and format pits data from JSON object

formatPitsData <- function(rd_pits){
  pd <- rd_pits$MRData$RaceTable$Races[[1]]$PitStops
  pits_data <- data.frame(lap = numeric(),
                         driverID = character(),
                         stopnum = numeric(),
                         duration = numeric(),
                         strtime = character(),
                         rawtime = numeric(),
                         strduration = character(),
                         rawduration = numeric(),
                         milliseconds = numeric(),
                         stringsAsFactors = FALSE)

  for (i in 1:length(pd)){
    pits_data = rbind(pits_data,data.frame(
      lap = getNum(pd[[i]]$lap),
      driverId = pd[[i]]$driverId,
      stopnum = as.integer(as.character(pd[[i]]$stop)),
      strtime = pd[[i]]$time,
      rawtime=timeInS(pd[[i]]$time),
      strduration = pd[[i]]$duration,
      rawduration = timeInS(pd[[i]]$duration),
      milliseconds = 1000 * timeInS(pd[[i]]$duration)))
  }
  pits_data
}

# Generate dataframe containing pit data for a specified year and round

pitData <- function(year,raceNum,format = 'json'){
  rd_pits = getJSONbyURL(getPitsbyYearRace_URL(year,raceNum))
  formatPitsData(rd_pits)
}

# Get dataframe for races by year

racesData <- function(year){
  races_data <- data.frame(
    round = numeric(),
    racename = character(),
    circuitId = character())

  rd = getJSONbyURL(getRacesByYear_URL(year))
  races = rd$MRData$RaceTable$Races

  for (i in 1:length(races)){
    races_data = rbind(races_data,data.frame(
      round = races[[i]]$round,
      racename = races[[i]]$raceName,
      circuitId = races[[i]]$Circuit$circuitId))
  }
  races_data
}

# Get dataframe for drivers by year

driversData <- function(year){
  drivers_data <- data.frame(
    name = character(),
    driverId = character())

  drivers_json = fromJSON(getDriversbyYear_URL(year))
  drivers = drivers_json$MRData$DriverTable$Drivers

  for (i in 1:length(drivers)){
    if (is.na(drivers[[i]]['permanentNumber'])) permNumber=NA
    else permNumber = drivers[[i]]['permanentNumber']

    drivers_data = rbind(drivers_data,data.frame(
      driverId = drivers[[i]]['driverId'],
      name = drivers[[i]]['familyName'],
      code = drivers[[i]]['code'],
      permNumber = permNumber))
  }
  drivers_data
}


# Parse dataframe containing qualifying results

qualResultsParse <- function(url){
  drj = getJSONbyURL(url)
  drdr = drj$MRData$RaceTable$Races

  qual_results_data <- data.frame(
    season = numeric(),
    round = numeric(),
    driverId = character(),
    code = character(),
    constructorId = character(),
    position = numeric(),
    Q1 = character(),
    Q2 = character(),
    Q3 = character(),
    Q1_time = numeric(),
    Q2_time = numeric(),
    Q3_time = numeric())

  for (i in 1:length(drdr)){
    season = as.integer(drdr[[i]]$season)
    round = as.integer(drdr[[i]]$round)

    for (j in 1:length(drdr[[i]]$QualifyingResults)) {
      drd = drdr[[i]]$QualifyingResults[[j]]

      if ("Q1" %in% names(drd)) Q1 = as.character(drd$Q1) else Q1 = NA
      if ("Q2" %in% names(drd)) Q2 = as.character(drd$Q2) else Q2 = NA
      if ("Q3" %in% names(drd)) Q3 = as.character(drd$Q3) else Q3 = NA

      qual_results_data = rbind(qual_results_data,data.frame(
        driverId = as.character(drd$Driver$driverId),
        code = as.character(driverCodeExists(drd$Driver)),
        constructorId = as.character(drd$Constructor$constructorId),
        position = as.integer(drd$position),
        Q1 = Q1,Q2 = Q2,Q3 = Q3,
        Q1_time = timeInS(Q1),
        Q2_time = timeInS(Q2),
        Q3_time = timeInS(Q3),
        season = season,
        round = round))
    }
  }

  qual_results_data['Q1_rank'] = rank(qual_results_data['Q1_time'],na.last = 'keep')
  qual_results_data['Q2_rank'] = rank(qual_results_data['Q2_time'],na.last = 'keep')
  qual_results_data['Q3_rank'] = rank(qual_results_data['Q3_time'],na.last = 'keep')

  qual_results_data
}

# Dataframe containing qualifying results

qualResults <- function(year = NA,raceNum = NA,driverRef = NA,constructorRef = NA,format = 'json'){
  url = getQual_URL(year = year,
                   raceNum = raceNum,
                   driverRef = driverRef,
                   constructorRef = constructorRef,
                   format = format)
  qualResultsParse(url)
}

# Get dataframe containing results by driver

driverResults <- function(year,driverRef=NA){
  drj = getJSONbyURL(getResultsbyYearDriver_URL(year,driverRef))
  drdr = drj$MRData$RaceTable$Races

  driver_results <- data.frame(
    driverId = character(),
    code = character(),
    constructorId = character(),
    grid = numeric(),
    laps = numeric(),
    position = numeric(),
    positionText = character(),
    points = numeric(),
    status = character(),
    season = numeric(),
    round = numeric())

  for (i in 1:length(drdr)){
    season = as.integer(drdr[[i]]$season)
    round = as.integer(drdr[[i]]$round)
    drd = drdr[[i]]$Results[[1]]

    driver_results = rbind(driver_results,data.frame(
      driverId = as.character(drd$Driver$driverId),
      code = as.character(drd$Driver$code),
      constructorId = as.character(drd$Constructor$constructorId),
      grid = as.integer(drd$grid),
      laps = as.integer(drd$laps),
      position = as.integer(drd$position),
      positionText = as.character(drd$positionText),
      points = as.integer(drd$points),
      status = as.character(drd$status),
      season = season,
      round = round))
  }
  driver_results
}

# Get dataframe for races by year

resultsData <- function(year,raceNum){
  rrj = getJSONbyURL(getResultsbyYearRace_URL(year,raceNum))
  rrd = rrj$MRData$RaceTable$Races[[1]]$Results

  race_results <- data.frame(
    carNum = numeric(),
    pos = numeric(),
    driverId = character(),
    constructorId = character(),
    grid = numeric(),
    laps = numeric(),
    status = character(),
    millitime = numeric(),
    fastlapnum = numeric(),
    fastlaptime = character(),
    fastlaprank = numeric())

  for (i in 1:length(rrd)){
    race_results = rbind(race_results,data.frame(
      carNum = as.integer(as.character(rrd[[i]]$number)),
      pos = as.integer(as.character(rrd[[i]]$position)),
      driverId = rrd[[i]]$Driver$driverId,
      constructorId = rrd[[i]]$Constructor$constructorId,
      grid = as.integer(as.character(rrd[[i]]$grid)),
      laps = as.integer(as.character(rrd[[i]]$laps)),
      status = rrd[[i]]$status,
      fastlapnum = hack1(rrd[[i]]),
      fastlaptime = hack2(rrd[[i]]),
      fastlaprank = hack3(rrd[[i]])))
  }
  race_results$driverId = reorder(race_results$driverId, race_results$carNum)
  race_results
}

# Get race winner by season and year

raceWinner <- function(year,raceNum){
  dataPath = paste(year,raceNum,"results","1",sep = '/')
  wURL = paste(API_PATH,dataPath,".json",sep = '')

  wd = fromJSON(wURL,simplify = FALSE)
  wd$MRData$RaceTable$Races[[1]]$Results[[1]]$Driver$driverId
}

# Parse JSON driver standings data

driverStandings <- function(dURL){
  drj = getJSONbyURL(dURL)
  drd = drj$MRData$StandingsTable$StandingsLists

  driverStandings_data <- data.frame()

  for (i in 1:length(drd)){
    for (j in 1:length(drd[[i]]$DriverStandings))

      driverStandings_data = rbind(driverStandings_data,data.frame(
        year = getNum(drd[[i]]$season),
        driverId = drd[[i]]$DriverStandings[[j]]$Driver$driverId,
        code = driverCodeExists(drd[[i]]$DriverStandings[[j]]$Driver),
        pos = getNum(drd[[i]]$DriverStandings[[j]]$position),
        points = getNum(drd[[i]]$DriverStandings[[j]]$points),
        wins = getNum(drd[[i]]$DriverStandings[[j]]$wins),
        car = drd[[i]]$DriverStandings[[j]]$Constructors[[1]]$constructorId))
  }
  driverStandings_data
}


# Get dataframe for season standings by year

seasonStandings <- function(year,race = ''){
  if (race == '')
    dURL = paste(API_PATH,year,'/driverStandings.json',sep = '')
  else
    dURL= paste(API_PATH,year,'/',race,'/driverStandings.json',sep = '')
  driverStandings(dURL)
}

# Get dataframe for individual driver standings by year

driverCareerStandings <- function(driverId){
  dURL = paste(API_PATH,'drivers/',driverId,'/driverStandings.json',sep = '')
  driverStandings(dURL)
}

# Parse JSON driver standings data

parse_constructorStandings <- function(dURL){
  drj = getJSONbyURL(dURL)
  drd = drj$MRData$StandingsTable$StandingsLists

  constructorStandings_data = data.frame()

  for (i in 1:length(drd)){
    constructorStandings = drd[[i]]$ConstructorStandings

    for (j in 1:length(constructorStandings)){
      constructorStanding = constructorStandings[[j]]
      constructorStandings_data = rbind(constructorStandings_data,data.frame(
        year = getNum(drd[[i]]$season),
        constructorId = constructorStanding$Constructor$constructorId,
        pos = getNum(constructorStanding$position),
        positionText = getNum(constructorStanding$positionText),
        points = getNum(constructorStanding$points),
        wins = getNum(constructorStanding$wins),
        name = constructorStanding$Constructor$name))
    }
  }
  constructorStandings_data
}

# Get dataframe for constructor final standings by year or race

constructorStandings <- function(year,race = ''){
  if (race == '')
    dURL = paste(API_PATH,year,'/constructorStandings.json',sep = '')
  else
    dURL = paste(API_PATH,year,'/',race,'/constructorStandings.json',sep = '')

    parse_constructorStandings(dURL)
}

hack1 <- function(c){
   if (length(c$FastestLap) > 0)
     getNum(c$FastestLap$lap)
   else NA
}
hack2 <- function(c){
  if (length(c$FastestLap) > 0)
    timeInS(c$FastestLap$Time$time)
  else NA
}
hack3 <- function(c){
  if (length(c$FastestLap)>0)
    getNum(c$FastestLap$rank)
  else NA
}
